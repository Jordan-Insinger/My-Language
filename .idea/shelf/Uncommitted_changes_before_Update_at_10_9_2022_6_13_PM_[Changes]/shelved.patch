Index: src/main/java/plc/project/Parser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package plc.project;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.math.BigDecimal;\r\nimport java.math.BigInteger;\r\nimport java.util.Optional;\r\n\r\n/**\r\n * The parser takes the sequence of tokens emitted by the lexer and turns that\r\n * into a structured representation of the program, called the Abstract Syntax\r\n * Tree (AST).\r\n *\r\n * The parser has a similar architecture to the lexer, just with {@link Token}s\r\n * instead of characters. As before, {@link #peek(Object...)} and {@link\r\n * #match(Object...)} are helpers to make the implementation easier.\r\n *\r\n * This type of parser is called <em>recursive descent</em>. Each rule in our\r\n * grammar will have its own function, and reference to other rules correspond\r\n * to calling that functions.\r\n */\r\npublic final class Parser {\r\n\r\n    private final TokenStream tokens;\r\n\r\n    public Parser(List<Token> tokens) {\r\n        this.tokens = new TokenStream(tokens);\r\n    }\r\n\r\n    /**\r\n     * Parses the {@code source} rule.\r\n     */\r\n    public Ast.Source parseSource() throws ParseException {\r\n        throw new UnsupportedOperationException(); //TODO\r\n    }\r\n\r\n    /**\r\n     * Parses the {@code field} rule. This method should only be called if the\r\n     * next tokens start a global, aka {@code LIST|VAL|VAR}.\r\n     */\r\n    public Ast.Global parseGlobal() throws ParseException {\r\n        throw new UnsupportedOperationException(); //TODO\r\n    }\r\n\r\n    /**\r\n     * Parses the {@code list} rule. This method should only be called if the\r\n     * next token declares a list, aka {@code LIST}.\r\n     */\r\n    public Ast.Global parseList() throws ParseException {\r\n        //list ::= 'LIST' identifier '=' '[' expression (',' expression)* ']'\r\n        throw new UnsupportedOperationException(); //TODO\r\n    }\r\n\r\n    /**\r\n     * Parses the {@code mutable} rule. This method should only be called if the\r\n     * next token declares a mutable global variable, aka {@code VAR}.\r\n     */\r\n    public Ast.Global parseMutable() throws ParseException {\r\n        throw new UnsupportedOperationException(); //TODO\r\n    }\r\n\r\n    /**\r\n     * Parses the {@code immutable} rule. This method should only be called if the\r\n     * next token declares an immutable global variable, aka {@code VAL}.\r\n     */\r\n    public Ast.Global parseImmutable() throws ParseException {\r\n        throw new UnsupportedOperationException(); //TODO\r\n    }\r\n\r\n    /**\r\n     * Parses the {@code function} rule. This method should only be called if the\r\n     * next tokens start a method, aka {@code FUN}.\r\n     */\r\n    public Ast.Function parseFunction() throws ParseException {\r\n        throw new UnsupportedOperationException(); //TODO\r\n    }\r\n\r\n    /**\r\n     * Parses the {@code block} rule. This method should only be called if the\r\n     * preceding token indicates the opening a block.\r\n     */\r\n    public List<Ast.Statement> parseBlock() throws ParseException {\r\n        throw new UnsupportedOperationException(); //TODO\r\n    }\r\n\r\n    /**\r\n     * Parses the {@code statement} rule and delegates to the necessary method.\r\n     * If the next tokens do not start a declaration, if, while, or return\r\n     * statement, then it is an expression/assignment statement.\r\n     */\r\n    public Ast.Statement parseStatement() throws ParseException {\r\n        Ast.Expression expr = parseExpression();\r\n        //if(match(Token.Type.IDENTIFIER, '=')){\r\n        //String temp = tokens.get(-1).getLiteral();\r\n        // need access instead of temp\r\n        //return new Ast.Statement.Assignment(temp, expr);\r\n        //}\r\n        //else\r\n        return new Ast.Statement.Expression(expr);\r\n        //return parseExpression();\r\n        //throw new UnsupportedOperationException(); //TODO\r\n    }\r\n\r\n    /**\r\n     * Parses a declaration statement from the {@code statement} rule. This\r\n     * method should only be called if the next tokens start a declaration\r\n     * statement, aka {@code LET}.\r\n     */\r\n    public Ast.Statement.Declaration parseDeclarationStatement() throws ParseException {\r\n        throw new UnsupportedOperationException(); //TODO\r\n    }\r\n\r\n    /**\r\n     * Parses an if statement from the {@code statement} rule. This method\r\n     * should only be called if the next tokens start an if statement, aka\r\n     * {@code IF}.\r\n     */\r\n    public Ast.Statement.If parseIfStatement() throws ParseException {\r\n        throw new UnsupportedOperationException(); //TODO\r\n    }\r\n\r\n    /**\r\n     * Parses a switch statement from the {@code statement} rule. This method\r\n     * should only be called if the next tokens start a switch statement, aka\r\n     * {@code SWITCH}.\r\n     */\r\n    public Ast.Statement.Switch parseSwitchStatement() throws ParseException {\r\n        throw new UnsupportedOperationException(); //TODO\r\n    }\r\n\r\n    /**\r\n     * Parses a case or default statement block from the {@code switch} rule. \r\n     * This method should only be called if the next tokens start the case or \r\n     * default block of a switch statement, aka {@code CASE} or {@code DEFAULT}.\r\n     */\r\n    public Ast.Statement.Case parseCaseStatement() throws ParseException {\r\n        throw new UnsupportedOperationException(); //TODO\r\n\r\n    }\r\n\r\n    /**\r\n     * Parses a while statement from the {@code statement} rule. This method\r\n     * should only be called if the next tokens start a while statement, aka\r\n     * {@code WHILE}.\r\n     */\r\n    public Ast.Statement.While parseWhileStatement() throws ParseException {\r\n        throw new UnsupportedOperationException(); //TODO\r\n    }\r\n\r\n    /**\r\n     * Parses a return statement from the {@code statement} rule. This method\r\n     * should only be called if the next tokens start a return statement, aka\r\n     * {@code RETURN}.\r\n     */\r\n    public Ast.Statement.Return parseReturnStatement() throws ParseException {\r\n        throw new UnsupportedOperationException(); //TODO:\r\n    }\r\n\r\n    /**\r\n     * Parses the {@code expression} rule.\r\n     */\r\n    public Ast.Expression parseExpression() throws ParseException {\r\n        return parseLogicalExpression(); //TODO write parse exception\r\n    }\r\n\r\n    /**\r\n     * Parses the {@code logical-expression} rule.\r\n     */\r\n    public Ast.Expression parseLogicalExpression() throws ParseException { // logical_expression ::= comparison_expression (('&&' | '||') comparison_expression)*\r\n        Ast.Expression expr = parseComparisonExpression();\r\n\r\n        while(match(\"&&\")||match(\"||\")) {   // Kleene closure: (('&' | '||') comparison_expression)*\r\n            String operator_logical = tokens.get(-1).getLiteral();  // Gets && or || from token\r\n            Ast.Expression right = parseComparisonExpression();     // Gets the expression to the right of the operator\r\n            expr = new Ast.Expression.Binary(operator_logical, expr, right);    // Creates binary expression combining previous parts\r\n        }\r\n        return expr;\r\n    }\r\n\r\n    /**\r\n     * Parses the {@code equality-expression} rule.\r\n     */\r\n    public Ast.Expression parseComparisonExpression() throws ParseException { // additive_expression (('<' | '>' | '==' | '!=') additive_expression)*\r\n        Ast.Expression expr = parseAdditiveExpression();\r\n\r\n        while(match(\"<\") || match(\">\") || match(\"==\") || match(\"!=\")) { //(('<' | '>' | '==' | '!=') additive_expression)*\r\n            String operator_comparison = tokens.get(-1).getLiteral();\r\n            Ast.Expression right = parseAdditiveExpression();\r\n            expr = new Ast.Expression.Binary(operator_comparison, expr, right);\r\n        }\r\n        return expr;\r\n    }\r\n\r\n    /**\r\n     * Parses the {@code additive-expression} rule.\r\n     */\r\n    public Ast.Expression parseAdditiveExpression() throws ParseException { // multiplicative_expression (('+' | '-') multiplicative_expression)*\r\n        Ast.Expression expr = parseMultiplicativeExpression();\r\n\r\n        while (match(\"+\") || match(\"-\")) { // (('+' | '-') multiplicative_expression)*\r\n            String operator_additive = tokens.get(-1).getLiteral();\r\n            Ast.Expression right = parseMultiplicativeExpression();\r\n            expr = new Ast.Expression.Binary(operator_additive,expr,right);\r\n        }\r\n        return expr;\r\n    }\r\n\r\n    /**\r\n     * Parses the {@code multiplicative-expression} rule.\r\n     */\r\n    public Ast.Expression parseMultiplicativeExpression() throws ParseException { // primary_expression (('*' | '/' | '^') primary_expression)*\r\n        Ast.Expression expr = parsePrimaryExpression();\r\n\r\n        while(match(\"*\") || match(\"/\") || match(\"^\")) { // (('*' | '/' | '^') primary_expression)*\r\n            String operator_multiplicative = tokens.get(-1).getLiteral();\r\n            Ast.Expression right = parsePrimaryExpression();\r\n            expr = new Ast.Expression.Binary(operator_multiplicative, expr, right);\r\n        }\r\n        return expr;\r\n    }\r\n\r\n    /**\r\n     * Parses the {@code primary-expression} rule. This is the top-level rule\r\n     * for expressions and includes literal values, grouping, variables, and\r\n     * functions. It may be helpful to break these up into other methods but is\r\n     * not strictly necessary.\r\n     */\r\n    public Ast.Expression parsePrimaryExpression() throws ParseException {\r\n        if (match(\"NIL\")) return new Ast.Expression.Literal(null);\r\n        else if (match(\"TRUE\")) return new Ast.Expression.Literal(true);\r\n        else if (match(\"FALSE\")) return new Ast.Expression.Literal(false);\r\n        else if (match(Token.Type.INTEGER)) return new Ast.Expression.Literal(new BigInteger(tokens.get(-1).getLiteral()));\r\n        else if (match(Token.Type.DECIMAL)) return new Ast.Expression.Literal(new BigDecimal(tokens.get(-1).getLiteral()));\r\n        else if (match(Token.Type.CHARACTER)) {\r\n            String temp = tokens.get(-1).getLiteral();\r\n            return new Ast.Expression.Literal(tokens.get(-1).getLiteral().charAt(1));\r\n        }\r\n        else if (match(Token.Type.IDENTIFIER)) {\r\n            String temp = tokens.get(-1).getLiteral();\r\n            //function call expression\r\n            List<Ast.Expression> expr = new ArrayList<Ast.Expression>();\r\n            if(match(\"(\")){\r\n                while(!match(\")\")){\r\n                    match(\",\");\r\n                    expr.add(parseExpression());\r\n                }\r\n                return new Ast.Expression.Function(temp, expr);\r\n            }\r\n            else if(match(\"[\")) {\r\n                Ast.Expression.Access offset = (Ast.Expression.Access) parseExpression();\r\n                Ast.Expression.Access access = new Ast.Expression.Access(Optional.of(new Ast.Expression.Access(Optional.empty(), offset.getName())), temp);\r\n                match(\"]\");\r\n                return access;\r\n            }\r\n            return new Ast.Expression.Access(Optional.empty(), temp);\r\n        }\r\n        else if(match(Token.Type.STRING)){\r\n            String temp = tokens.get(-1).getLiteral();\r\n            temp = temp.substring(1, temp.length()-1);\r\n            // needs all escape char\r\n            if(temp.contains(\"\\\\\")){\r\n                temp = temp.replace(\"\\\\n\", \"\\n\");\r\n            }\r\n            return new Ast.Expression.Literal(temp);\r\n        }\r\n        else if (match(\"(\")) {\r\n            Ast.Expression expr = parseExpression();    //Inner Expression\r\n            if(match(\")\"))\r\n                return new Ast.Expression.Group(expr);\r\n            String temp = tokens.get(-1).getLiteral();\r\n            throw new ParseException(\"No closing Parenthesis\", temp.length()-1);\r\n        }\r\n        throw new UnsupportedOperationException(); //TODO FINISH PRIMARY EXPRESSIONS AND ADD PARSE EXCEPTIONS\r\n    }\r\n\r\n    /**\r\n     * As in the lexer, returns {@code true} if the current sequence of tokens\r\n     * matches the given patterns. Unlike the lexer, the pattern is not a regex;\r\n     * instead it is either a {@link Token.Type}, which matches if the token's\r\n     * type is the same, or a {@link String}, which matches if the token's\r\n     * literal is the same.\r\n     *\r\n     * In other words, {@code Token(IDENTIFIER, \"literal\")} is matched by both\r\n     * {@code peek(Token.Type.IDENTIFIER)} and {@code peek(\"literal\")}.\r\n     */\r\n    private boolean peek(Object... patterns) {\r\n        // throw new UnsupportedOperationException(); //TODO (in lecture)\r\n        for (int i = 0; i < patterns.length; i++) {\r\n            if (!tokens.has(i)) {\r\n                return false;\r\n            } else if (patterns[i] instanceof Token.Type) {\r\n                if (patterns[i] != tokens.get(i).getType()) {\r\n                    return false;\r\n                }\r\n            } else if (patterns[i] instanceof String) {\r\n                if(!patterns[i].equals(tokens.get(i).getLiteral())) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                throw new AssertionError(\"Invalid pattern object: \" + patterns[i].getClass());\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * As in the lexer, returns {@code true} if {@link #peek(Object...)} is true\r\n     * and advances the token stream.\r\n     */\r\n    private boolean match(Object... patterns) {\r\n        // throw new UnsupportedOperationException(); //TODO (in lecture)\r\n\r\n        boolean peek = peek(patterns);\r\n\r\n        if (peek) {\r\n            for (int i = 0; i < patterns.length; i++) {\r\n                tokens.advance();\r\n            }\r\n        }\r\n        return peek;\r\n    }\r\n\r\n    private static final class TokenStream {\r\n\r\n        private final List<Token> tokens;\r\n        private int index = 0;\r\n\r\n        private TokenStream(List<Token> tokens) {\r\n            this.tokens = tokens;\r\n        }\r\n\r\n        /**\r\n         * Returns true if there is a token at index + offset.\r\n         */\r\n        public boolean has(int offset) {\r\n            return index + offset < tokens.size();\r\n        }\r\n\r\n        /**\r\n         * Gets the token at index + offset.\r\n         */\r\n        public Token get(int offset) {\r\n            return tokens.get(index + offset);\r\n        }\r\n\r\n        /**\r\n         * Advances to the next token, incrementing the index.\r\n         */\r\n        public void advance() {\r\n            index++;\r\n        }\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/plc/project/Parser.java b/src/main/java/plc/project/Parser.java
--- a/src/main/java/plc/project/Parser.java	(revision c0a72a6e2ae694183475e1ccc08f8f2e51715d76)
+++ b/src/main/java/plc/project/Parser.java	(date 1665353613613)
@@ -1,5 +1,6 @@
 package plc.project;
 
+import javax.swing.text.html.Option;
 import java.util.ArrayList;
 import java.util.List;
 import java.math.BigDecimal;
@@ -16,7 +17,7 @@
  * #match(Object...)} are helpers to make the implementation easier.
  *
  * This type of parser is called <em>recursive descent</em>. Each rule in our
- * grammar will have its own function, and reference to other rules correspond
+ * grammar will have it's own function, and reference to other rules correspond
  * to calling that functions.
  */
 public final class Parser {
@@ -90,14 +91,17 @@
      */
     public Ast.Statement parseStatement() throws ParseException {
         Ast.Expression expr = parseExpression();
-        //if(match(Token.Type.IDENTIFIER, '=')){
-        //String temp = tokens.get(-1).getLiteral();
-        // need access instead of temp
-        //return new Ast.Statement.Assignment(temp, expr);
-        //}
-        //else
+        if(match("=")){
+            Ast.Expression val = parseExpression();
+            return new Ast.Statement.Assignment(expr, val);
+        }
+       // Ast.Expression val = parseExpression();
+
         return new Ast.Statement.Expression(expr);
-        //return parseExpression();
+
+
+        //return new Ast.Statement.Expression(expr);
+
         //throw new UnsupportedOperationException(); //TODO
     }
 
@@ -233,7 +237,7 @@
         else if (match(Token.Type.DECIMAL)) return new Ast.Expression.Literal(new BigDecimal(tokens.get(-1).getLiteral()));
         else if (match(Token.Type.CHARACTER)) {
             String temp = tokens.get(-1).getLiteral();
-            return new Ast.Expression.Literal(tokens.get(-1).getLiteral().charAt(1));
+            return new Ast.Expression.Literal(temp.charAt(1));
         }
         else if (match(Token.Type.IDENTIFIER)) {
             String temp = tokens.get(-1).getLiteral();
@@ -246,13 +250,15 @@
                 }
                 return new Ast.Expression.Function(temp, expr);
             }
-            else if(match("[")) {
-                Ast.Expression.Access offset = (Ast.Expression.Access) parseExpression();
-                Ast.Expression.Access access = new Ast.Expression.Access(Optional.of(new Ast.Expression.Access(Optional.empty(), offset.getName())), temp);
-                match("]");
-                return access;
+            else if (match("[")) {
+                Ast.Expression init = parsePrimaryExpression();
+                return new Ast.Expression.Access(Optional.of(init), temp);
             }
+
             return new Ast.Expression.Access(Optional.empty(), temp);
+
+            //TODO Add if statement for Access Expressions
+
         }
         else if(match(Token.Type.STRING)){
             String temp = tokens.get(-1).getLiteral();
@@ -267,8 +273,12 @@
             Ast.Expression expr = parseExpression();    //Inner Expression
             if(match(")"))
                 return new Ast.Expression.Group(expr);
+<<<<<<< HEAD
             String temp = tokens.get(-1).getLiteral();
             throw new ParseException("No closing Parenthesis", temp.length()-1);
+=======
+                                                        //Throws Parse Error for Improper grouping
+>>>>>>> origin/master
         }
         throw new UnsupportedOperationException(); //TODO FINISH PRIMARY EXPRESSIONS AND ADD PARSE EXCEPTIONS
     }
@@ -352,4 +362,4 @@
 
     }
 
-}
\ No newline at end of file
+}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8f69a869-f310-4864-9489-16991fc37ceb\" name=\"Changes\" comment=\"some binary tests work, parsed add and multi expression\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/plc/project/Parser.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/plc/project/Parser.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"ExternalProjectsManager\">\r\n    <system id=\"GRADLE\">\r\n      <state>\r\n        <task path=\"$PROJECT_DIR$\">\r\n          <activation />\r\n        </task>\r\n        <projects_view>\r\n          <tree_state>\r\n            <expand>\r\n              <path>\r\n                <item name=\"\" type=\"6a2764b6:ExternalProjectsStructure$RootNode\" />\r\n                <item name=\"PLC_Project\" type=\"f1a62948:ProjectNode\" />\r\n              </path>\r\n            </expand>\r\n            <select />\r\n          </tree_state>\r\n        </projects_view>\r\n      </state>\r\n    </system>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2DukbFo6eJ3b5zI5LsrNvDadYzb\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\" selected=\"Gradle.ParserExpressionTests\">\r\n    <configuration name=\"LexerTests\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;plc.project.LexerTests&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"LexerTests.testExamples\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;plc.project.LexerTests.testExamples&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"ParserExpressionTests\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;plc.project.ParserExpressionTests&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"ParserExpressionTests.testBinaryExpression\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;plc.project.ParserExpressionTests.testBinaryExpression&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"ParserExpressionTests.testLiteralExpression\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;plc.project.ParserExpressionTests.testLiteralExpression&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Gradle.ParserExpressionTests\" />\r\n        <item itemvalue=\"Gradle.ParserExpressionTests.testLiteralExpression\" />\r\n        <item itemvalue=\"Gradle.ParserExpressionTests.testBinaryExpression\" />\r\n        <item itemvalue=\"Gradle.LexerTests\" />\r\n        <item itemvalue=\"Gradle.LexerTests.testExamples\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8f69a869-f310-4864-9489-16991fc37ceb\" name=\"Changes\" comment=\"\" />\r\n      <created>1661556433976</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1661556433976</updated>\r\n      <workItem from=\"1663435050495\" duration=\"11195000\" />\r\n      <workItem from=\"1663594605402\" duration=\"374000\" />\r\n      <workItem from=\"1663595023010\" duration=\"413000\" />\r\n      <workItem from=\"1663642615664\" duration=\"391000\" />\r\n      <workItem from=\"1663776914876\" duration=\"3900000\" />\r\n      <workItem from=\"1663786529791\" duration=\"2959000\" />\r\n      <workItem from=\"1663884468233\" duration=\"2796000\" />\r\n      <workItem from=\"1663887306722\" duration=\"1202000\" />\r\n      <workItem from=\"1664074665131\" duration=\"1335000\" />\r\n      <workItem from=\"1664231433038\" duration=\"6042000\" />\r\n      <workItem from=\"1664239190041\" duration=\"36000\" />\r\n      <workItem from=\"1664906085055\" duration=\"6881000\" />\r\n      <workItem from=\"1664975729431\" duration=\"797000\" />\r\n      <workItem from=\"1664980339452\" duration=\"484000\" />\r\n      <workItem from=\"1665010003605\" duration=\"1256000\" />\r\n      <workItem from=\"1665016238984\" duration=\"2118000\" />\r\n      <workItem from=\"1665022548609\" duration=\"1089000\" />\r\n      <workItem from=\"1665083673495\" duration=\"947000\" />\r\n      <workItem from=\"1665258807349\" duration=\"4590000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Added the peek/match methods\">\r\n      <created>1663436218162</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1663436218162</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Added Params:5.8.2 to testImplementation dependencies\">\r\n      <created>1663516491680</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1663516491680</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Added LexIdentifier()\">\r\n      <created>1663595301962</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1663595301962</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"added lexString, lexEscape, lexOperator\">\r\n      <created>1663779266385</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1663779266385</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"fixed lexString, lexEscape\">\r\n      <created>1663781792307</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1663781792307</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"fixed leading hyphen, newline unterminated, and invalid escape. added relevant test cases\">\r\n      <created>1663888288350</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1663888288350</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"possible fix to weird quotes test case\">\r\n      <created>1664075421979</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1664075421979</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"fixed weird quotes\">\r\n      <created>1664239061633</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1664239061633</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"some binary tests work, parsed add and multi expression\">\r\n      <created>1665023038369</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1665023038369</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"10\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Added the peek/match methods\" />\r\n    <MESSAGE value=\"Added Params:5.8.2 to testImplementation dependencies\" />\r\n    <MESSAGE value=\"Added LexIdentifier()\" />\r\n    <MESSAGE value=\"added lexString, lexEscape, lexOperator\" />\r\n    <MESSAGE value=\"fixed lexString, lexEscape\" />\r\n    <MESSAGE value=\"fixed leading hypen, newline unterminated, and invalid escape. added relevant test cases\" />\r\n    <MESSAGE value=\"fixed leading hyphen, newline unterminated, and invalid escape. added relevant test cases\" />\r\n    <MESSAGE value=\"possible fix to weird quotes test case\" />\r\n    <MESSAGE value=\"fixed weird quotes\" />\r\n    <MESSAGE value=\"some binary tests work, parsed add and multi expression\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"some binary tests work, parsed add and multi expression\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c0a72a6e2ae694183475e1ccc08f8f2e51715d76)
+++ b/.idea/workspace.xml	(date 1665353626554)
@@ -4,7 +4,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="8f69a869-f310-4864-9489-16991fc37ceb" name="Changes" comment="some binary tests work, parsed add and multi expression">
+    <list default="true" id="8f69a869-f310-4864-9489-16991fc37ceb" name="Changes" comment="ParseException for groupExpression missing closing parenthesis">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/plc/project/Parser.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/plc/project/Parser.java" afterDir="false" />
     </list>
@@ -213,7 +213,9 @@
       <workItem from="1665016238984" duration="2118000" />
       <workItem from="1665022548609" duration="1089000" />
       <workItem from="1665083673495" duration="947000" />
-      <workItem from="1665258807349" duration="4590000" />
+      <workItem from="1665258807349" duration="5701000" />
+      <workItem from="1665266781013" duration="1439000" />
+      <workItem from="1665279787869" duration="3016000" />
     </task>
     <task id="LOCAL-00001" summary="Added the peek/match methods">
       <created>1663436218162</created>
@@ -278,7 +280,14 @@
       <option name="project" value="LOCAL" />
       <updated>1665023038369</updated>
     </task>
-    <option name="localTasksCounter" value="10" />
+    <task id="LOCAL-00010" summary="finished function,expression statement,literal">
+      <created>1665263555838</created>
+      <option name="number" value="00010" />
+      <option name="presentableId" value="LOCAL-00010" />
+      <option name="project" value="LOCAL" />
+      <updated>1665263555838</updated>
+    </task>
+    <option name="localTasksCounter" value="11" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -306,6 +315,7 @@
     <MESSAGE value="possible fix to weird quotes test case" />
     <MESSAGE value="fixed weird quotes" />
     <MESSAGE value="some binary tests work, parsed add and multi expression" />
-    <option name="LAST_COMMIT_MESSAGE" value="some binary tests work, parsed add and multi expression" />
+    <MESSAGE value="finished function,expression statement,literal" />
+    <option name="LAST_COMMIT_MESSAGE" value="finished function,expression statement,literal" />
   </component>
 </project>
\ No newline at end of file
